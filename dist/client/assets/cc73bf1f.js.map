{"version":3,"file":"cc73bf1f.js","sources":["../../../src/components/CountrySelector.client.jsx"],"sourcesContent":["import {useCallback, useState, Suspense} from 'react';\nimport {useLocalization, fetchSync} from '@shopify/hydrogen';\n// @ts-expect-error @headlessui/react incompatibility with node16 resolution\nimport {Listbox} from '@headlessui/react';\n\nimport {IconCheck, IconCaret} from '~/components';\nimport {useMemo} from 'react';\n\n/**\n * A client component that selects the appropriate country to display for products on a website\n */\nexport function CountrySelector() {\n  const [listboxOpen, setListboxOpen] = useState(false);\n  const {\n    country: {isoCode},\n  } = useLocalization();\n  const currentCountry = useMemo(() => {\n    const regionNamesInEnglish = new Intl.DisplayNames(['en'], {\n      type: 'region',\n    });\n\n    return {\n      name: regionNamesInEnglish.of(isoCode),\n      isoCode: isoCode,\n    };\n  }, [isoCode]);\n\n  const setCountry = useCallback(\n    ({isoCode: newIsoCode}) => {\n      const currentPath = window.location.pathname;\n      let redirectPath;\n\n      if (newIsoCode !== 'US') {\n        if (currentCountry.isoCode === 'US') {\n          redirectPath = `/${newIsoCode.toLowerCase()}${currentPath}`;\n        } else {\n          redirectPath = `/${newIsoCode.toLowerCase()}${currentPath.substring(\n            currentPath.indexOf('/', 1),\n          )}`;\n        }\n      } else {\n        redirectPath = `${currentPath.substring(currentPath.indexOf('/', 1))}`;\n      }\n\n      window.location.href = redirectPath;\n    },\n    [currentCountry],\n  );\n\n  return (\n    <div className=\"relative\">\n      <Listbox onChange={setCountry}>\n        {/* @ts-expect-error @headlessui/react incompatibility with node16 resolution */}\n        {({open}) => {\n          setTimeout(() => setListboxOpen(open));\n          return (\n            <>\n              <Listbox.Button\n                className={`flex items-center justify-between w-full py-3 px-4 border ${\n                  open ? 'rounded-b md:rounded-t md:rounded-b-none' : 'rounded'\n                } border-contrast/30 dark:border-white`}\n              >\n                <span className=\"\">{currentCountry.name}</span>\n                <IconCaret direction={open ? 'up' : 'down'} />\n              </Listbox.Button>\n\n              <Listbox.Options\n                className={`border-t-contrast/30 border-contrast/30 bg-primary dark:bg-contrast absolute bottom-12 z-10 grid\n                h-48 w-full overflow-y-scroll rounded-t border dark:border-white px-2 py-2\n                transition-[max-height] duration-150 sm:bottom-auto md:rounded-b md:rounded-t-none\n                md:border-t-0 md:border-b ${\n                  listboxOpen ? 'max-h-48' : 'max-h-0'\n                }`}\n              >\n                {listboxOpen && (\n                  <Suspense fallback={<div className=\"p-2\">Loadingâ€¦</div>}>\n                    {/* @ts-expect-error @headlessui/react incompatibility with node16 resolution */}\n                    <Countries\n                      selectedCountry={currentCountry}\n                      getClassName={(active) => {\n                        return `text-contrast dark:text-primary bg-primary \n                        dark:bg-contrast w-full p-2 transition rounded \n                        flex justify-start items-center text-left cursor-pointer ${\n                          active ? 'bg-primary/10' : null\n                        }`;\n                      }}\n                    />\n                  </Suspense>\n                )}\n              </Listbox.Options>\n            </>\n          );\n        }}\n      </Listbox>\n    </div>\n  );\n}\n\nexport function Countries({selectedCountry, getClassName}) {\n  const response = fetchSync('/api/countries');\n\n  let countries;\n\n  if (response.ok) {\n    countries = response.json();\n  } else {\n    console.error(\n      `Unable to load available countries ${response.url} returned a ${response.status}`,\n    );\n  }\n\n  return countries ? (\n    countries.map((country) => {\n      const isSelected = country.isoCode === selectedCountry.isoCode;\n\n      return (\n        <Listbox.Option key={country.isoCode} value={country}>\n          {/* @ts-expect-error @headlessui/react incompatibility with node16 resolution */}\n          {({active}) => (\n            <div\n              className={`text-contrast dark:text-primary ${getClassName(\n                active,\n              )}`}\n            >\n              {country.name}\n              {isSelected ? (\n                <span className=\"ml-2\">\n                  <IconCheck />\n                </span>\n              ) : null}\n            </div>\n          )}\n        </Listbox.Option>\n      );\n    })\n  ) : (\n    <div className=\"flex justify-center\">\n      <div className=\"mt-4 text-center\">\n        <div>Unable to load available countries.</div>\n        <div>Please try again.</div>\n      </div>\n    </div>\n  );\n}\n"],"names":["CountrySelector","listboxOpen","setListboxOpen","useState","country","isoCode","useLocalization","currentCountry","useMemo","name","Intl","DisplayNames","type","of","setCountry","useCallback","newIsoCode","currentPath","window","location","pathname","redirectPath","toLowerCase","substring","indexOf","href","Listbox","open","_Fragment","_jsxs","_jsx","IconCaret","Suspense","Countries","active","selectedCountry","getClassName","response","fetchSync","countries","ok","json","console","error","url","status","map","isSelected","IconCheck"],"mappings":"6jBAWO,SAASA,GAAkB,CAChC,KAAM,CAACC,EAAaC,CAAd,EAAgCC,mBAAS,EAAD,EACxC,CACJC,QAAS,CAACC,QAAAA,CAAD,GACPC,EAFJ,EAGMC,EAAiBC,EAAAA,QAAAA,QAAQ,KAKtB,CACLC,KAL2B,IAAIC,KAAKC,aAAa,CAAC,IAAD,EAAQ,CACzDC,KAAM,QAAA,CADqB,EAKAC,GAAGR,CAAxB,EACNA,QAAAA,CAAAA,GAED,CAACA,CAAD,CAT2B,EAWxBS,EAAaC,EAAAA,QAAAA,YACjB,CAAC,CAACV,QAASW,CAAAA,IAAgB,CACnBC,MAAAA,EAAcC,OAAOC,SAASC,SAChCC,IAAAA,EAEAL,IAAe,KACbT,EAAeF,UAAY,KACbgB,EAAA,IAAGL,EAAWM,YAAAA,IAAgBL,IAE9BI,EAAA,IAAGL,EAAWM,YAAAA,IAAgBL,EAAYM,UACxDN,EAAYO,QAAQ,IAAK,CAAzB,CAD4C,IAKhDH,EAAgB,GAAEJ,EAAYM,UAAUN,EAAYO,QAAQ,IAAK,CAAzB,CAAtB,IAGpBN,OAAOC,SAASM,KAAOJ,CAAAA,EAEzB,CAACd,CAAD,CAnB4B,EAsB9B,SACE,MAAA,CAAK,UAAU,WAAf,WACGmB,EAAD,CAAS,SAAUZ,EAAnB,SAEG,CAAC,CAACa,KAAAA,CAAAA,KACU,WAAA,IAAMzB,EAAeyB,CAAD,CAArB,IAERC,EAAA,CAAA,SACE,CAACC,EAAAH,EAAQ,OAAT,CACE,UAAY,6DACVC,EAAO,2CAA6C,iDAFxD,SAKE,CAAAG,EAAA,OAAA,CAAM,UAAU,GAAhB,SAAoBvB,EAAeE,IAAAA,CALrC,EAMEqB,EAACC,EAAD,CAAW,UAAWJ,EAAO,KAAO,MAAA,CANtC,CAAA,CAAA,CAAA,EASCG,EAAAJ,EAAQ,QAAT,CACE,UAAY;AAAA;AAAA;AAAA,4CAIVzB,EAAc,WAAa,YAL/B,SAQGA,GACC6B,EAACE,mBAAD,CAAU,WAAU,MAAA,CAAK,UAAU,MAAf,SAAA,eAAA,CAApB,EAAA,WAEGC,EAAD,CACE,gBAAiB1B,EACjB,aAA0B2B,GAChB;AAAA;AAAA,mFAGNA,EAAS,gBAAkB,MAE9B,CARH,CAAA,CAFF,CAAA,CAnBN,CAAA,CAAA,CADF,EAqCD,CAzCH,CAAA,CAFJ,CA+CD,CAEM,SAASD,EAAU,CAACE,gBAAAA,EAAiBC,aAAAA,CAAlB,EAAiC,CACnDC,MAAAA,EAAWC,EAAU,gBAAD,EAEtBC,IAAAA,EAEJ,OAAIF,EAASG,GACXD,EAAYF,EAASI,OAErBC,QAAQC,MACL,sCAAqCN,EAASO,kBAAkBP,EAASQ,QAD5E,EAKKN,EACLA,EAAUO,IAAiB1C,GAAA,CACnB2C,MAAAA,EAAa3C,EAAQC,UAAY8B,EAAgB9B,QAGrD,OAAAyB,EAACJ,EAAQ,OAAT,CAAsC,MAAOtB,EAA7C,SAEG,CAAC,CAAC8B,OAAAA,CAAAA,MACD,MAAA,CACE,UAAY,mCAAkCE,EAC5CF,CADwD,IAD5D,SAAA,CAKG9B,EAAQK,KACRsC,IACC,OAAA,CAAM,UAAU,OAAhB,SACEjB,EAACkB,EAAD,EAAA,CADF,CAAA,EAGE,IAVN,CAAA,CAAA,CAAA,EAHiB5C,EAAQC,OAA7B,CAAA,CAJJ,EAwBAyB,EAAA,MAAA,CAAK,UAAU,sBAAf,WACE,MAAA,CAAK,UAAU,mBAAf,SACE,CAAAA,EAAA,MAAA,CAAA,SAAA,qCAAA,CAAA,EACAA,EAAA,MAAA,CAAA,SAAA,mBAAA,CAFF,CAAA,CAAA,CAAA,CAAA,CA1BJ,CAgCD"}