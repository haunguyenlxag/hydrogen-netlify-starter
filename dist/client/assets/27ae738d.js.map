{"version":3,"file":"27ae738d.js","sources":["../../../node_modules/@shopify/hydrogen/dist/esnext/hooks/useProductOptions/helpers.js","../../../node_modules/@shopify/hydrogen/dist/esnext/components/ProductOptionsProvider/ProductOptionsProvider.client.js"],"sourcesContent":["export function getAllOptionValues(variants, option) {\n    return Array.from(new Set(variants.map((variant) => variant.selectedOptions.find((selection) => selection.name == option)\n        .value)));\n}\nexport function getSelectedVariant(variants, choices) {\n    /**\n     * Ensure the user has selected all the required options, not just some.\n     */\n    if (!variants.length ||\n        variants?.[0]?.selectedOptions?.length !== Object.keys(choices).length) {\n        return;\n    }\n    return variants?.find((variant) => {\n        return Object.entries(choices).every(([name, value]) => {\n            return variant?.selectedOptions?.some((option) => option?.name === name && option?.value === value);\n        });\n    });\n}\nexport function getOptions(variants) {\n    const map = variants.reduce((memo, variant) => {\n        if (!variant.selectedOptions) {\n            throw new Error(`'getOptions' requires 'variant.selectedOptions'`);\n        }\n        variant?.selectedOptions?.forEach((opt) => {\n            memo[opt?.name ?? ''] = memo[opt?.name ?? ''] || new Set();\n            memo[opt?.name ?? ''].add(opt?.value ?? '');\n        });\n        return memo;\n    }, {});\n    return Object.keys(map).map((option) => {\n        return {\n            name: option,\n            values: Array.from(map[option]),\n        };\n    });\n}\n","import React, { useMemo, useState, useEffect, useCallback } from 'react';\nimport { ProductOptionsContext } from './context.js';\nimport { getSelectedVariant, getOptions, } from '../../hooks/useProductOptions/helpers.js';\nimport { flattenConnection } from '../../utilities/flattenConnection/index.js';\nexport function ProductOptionsProvider({ children, data: product, initialVariantId: explicitVariantId, }) {\n    // The flattened variants\n    const variants = useMemo(() => flattenConnection(product.variants ?? {}), [product.variants]);\n    if (!isProductVariantArray(variants)) {\n        throw new Error(`<ProductOptionsProvider/> requires 'product.variants.nodes' or 'product.variants.edges'`);\n    }\n    // All the options available for a product, based on all the variants\n    const options = useMemo(() => getOptions(variants), [variants]);\n    /**\n     * Track the selectedVariant within the provider.\n     */\n    const [selectedVariant, setSelectedVariant] = useState(() => getVariantBasedOnIdProp(explicitVariantId, variants));\n    /**\n     * Track the selectedOptions within the provider. If a `initialVariantId`\n     * is passed, use that to select initial options.\n     */\n    const [selectedOptions, setSelectedOptions] = useState(() => getSelectedOptions(selectedVariant));\n    /**\n     * When the initialVariantId changes, we need to make sure we\n     * update the selected variant and selected options. If not,\n     * then the selected variant and options will reference incorrect\n     * values.\n     */\n    useEffect(() => {\n        const newSelectedVariant = getVariantBasedOnIdProp(explicitVariantId, variants);\n        setSelectedVariant(newSelectedVariant);\n        setSelectedOptions(getSelectedOptions(newSelectedVariant));\n    }, [explicitVariantId, variants]);\n    /**\n     * Allow the developer to select an option.\n     */\n    const setSelectedOption = useCallback((name, value) => {\n        setSelectedOptions((selectedOptions) => {\n            const opts = { ...selectedOptions, [name]: value };\n            setSelectedVariant(getSelectedVariant(variants, opts));\n            return opts;\n        });\n    }, [setSelectedOptions, variants]);\n    const isOptionInStock = useCallback((option, value) => {\n        const proposedVariant = getSelectedVariant(variants, {\n            ...selectedOptions,\n            ...{ [option]: value },\n        });\n        return proposedVariant?.availableForSale ?? true;\n    }, [selectedOptions, variants]);\n    const sellingPlanGroups = useMemo(() => flattenConnection(product.sellingPlanGroups ?? {}).map((sellingPlanGroup) => ({\n        ...sellingPlanGroup,\n        sellingPlans: flattenConnection(sellingPlanGroup?.sellingPlans ?? {}),\n    })), [product.sellingPlanGroups]);\n    /**\n     * Track the selectedSellingPlan within the hook. If `initialSellingPlanId`\n     * is passed, use that as an initial value. Look it up from the `selectedVariant`, since\n     * that is also a requirement.\n     */\n    const [selectedSellingPlan, setSelectedSellingPlan] = useState(undefined);\n    const selectedSellingPlanAllocation = useMemo(() => {\n        if (!selectedVariant || !selectedSellingPlan) {\n            return;\n        }\n        if (!selectedVariant.sellingPlanAllocations?.nodes &&\n            !selectedVariant.sellingPlanAllocations?.edges) {\n            throw new Error(`<ProductOptionsProvider/>: You must include 'sellingPlanAllocations.nodes' or 'sellingPlanAllocations.edges' in your variants in order to calculate selectedSellingPlanAllocation`);\n        }\n        return flattenConnection(selectedVariant.sellingPlanAllocations).find((allocation) => allocation?.sellingPlan?.id === selectedSellingPlan.id);\n    }, [selectedVariant, selectedSellingPlan]);\n    const value = useMemo(() => ({\n        variants,\n        variantsConnection: product.variants,\n        options,\n        selectedVariant,\n        setSelectedVariant,\n        selectedOptions,\n        setSelectedOption,\n        setSelectedOptions,\n        isOptionInStock,\n        selectedSellingPlan,\n        setSelectedSellingPlan,\n        selectedSellingPlanAllocation,\n        sellingPlanGroups,\n        sellingPlanGroupsConnection: product.sellingPlanGroups,\n    }), [\n        isOptionInStock,\n        options,\n        product.sellingPlanGroups,\n        product.variants,\n        selectedOptions,\n        selectedSellingPlan,\n        selectedSellingPlanAllocation,\n        selectedVariant,\n        sellingPlanGroups,\n        setSelectedOption,\n        variants,\n    ]);\n    return (React.createElement(ProductOptionsContext.Provider, { value: value }, children));\n}\nfunction getVariantBasedOnIdProp(explicitVariantId, variants) {\n    // get the initial variant based on the logic outlined in the comments for 'initialVariantId' above\n    // * 1. If `initialVariantId` is provided, then it's used even if it's out of stock.\n    if (explicitVariantId) {\n        const foundVariant = variants.find((variant) => variant?.id === explicitVariantId);\n        if (!foundVariant) {\n            console.warn(`<ProductOptionsProvider/> received a 'initialVariantId' prop, but could not actually find a variant with that ID`);\n        }\n        return foundVariant;\n    }\n    // * 2. If `initialVariantId` is provided but is `null`, then no variant is used.\n    if (explicitVariantId === null) {\n        return null;\n    }\n    // * 3. If nothing is passed to `initialVariantId` then the first available / in-stock variant is used.\n    // * 4. If nothing is passed to `initialVariantId` and no variants are in stock, then the first variant is used.\n    if (explicitVariantId === undefined) {\n        return variants.find((variant) => variant?.availableForSale) || variants[0];\n    }\n}\nfunction getSelectedOptions(selectedVariant) {\n    return selectedVariant?.selectedOptions\n        ? selectedVariant.selectedOptions.reduce((memo, optionSet) => {\n            memo[optionSet?.name ?? ''] = optionSet?.value ?? '';\n            return memo;\n        }, {})\n        : {};\n}\nfunction isProductVariantArray(maybeVariantArray) {\n    if (!maybeVariantArray || !Array.isArray(maybeVariantArray)) {\n        return false;\n    }\n    return true;\n}\n"],"names":["getSelectedVariant","variants","choices","_b","_a","variant","name","value","option","getOptions","map","memo","opt","_c","_d","ProductOptionsProvider","children","data","product","initialVariantId","explicitVariantId","useMemo","flattenConnection","isProductVariantArray","Error","options","selectedVariant","setSelectedVariant","useState","getVariantBasedOnIdProp","selectedOptions","setSelectedOptions","getSelectedOptions","useEffect","newSelectedVariant","setSelectedOption","useCallback","opts","isOptionInStock","proposedVariant","availableForSale","sellingPlanGroups","sellingPlanGroup","sellingPlans","selectedSellingPlan","setSelectedSellingPlan","undefined","selectedSellingPlanAllocation","sellingPlanAllocations","nodes","edges","find","allocation","sellingPlan","id","variantsConnection","sellingPlanGroupsConnection","_jsx","ProductOptionsContext","foundVariant","console","warn","reduce","optionSet","maybeVariantArray","Array","isArray"],"mappings":"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"}